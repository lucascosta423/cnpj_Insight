-- Versão otimizada da função
CREATE OR REPLACE FUNCTION rfb_cnpj.exportar_dados_cnpj_cursor(
    p_ufs text[],
    p_naturezas_juridicas text[],
    p_opcao_meis text[],
    p_situacoes_cadastrais text[],
    p_cnaes text[],
    p_cnpj_maior character varying,
    p_limit integer
) RETURNS TABLE(
    cnpj_completo character varying,
    razao_social character varying,
    cnae_fiscal_principal character varying,
    cnae_descricao character varying,
    telefone text,
    telefone2 text,
    opcao_mei character,
    uf character varying,
    cidade character varying,
    bairro character varying,
    tipo_logradouro character varying,
    logradouro character varying,
    numero character varying,
    complemento character varying,
    cep character varying,
    email character varying
) LANGUAGE plpgsql AS $function$
BEGIN
    RETURN QUERY
    SELECT
        e.cnpj_completo,
        emp.razao_social,
        e.cnae_fiscal_principal,
        c.descricao AS cnae_descricao,
        CASE
            WHEN e.ddd_telefone_1 IS NOT NULL AND e.telefone_1 IS NOT NULL
            THEN CONCAT(e.ddd_telefone_1, e.telefone_1)
            ELSE NULL
        END AS telefone,
        CASE
            WHEN e.ddd_telefone_2 IS NOT NULL AND e.telefone_2 IS NOT NULL
            THEN CONCAT(e.ddd_telefone_2, e.telefone_2)
            ELSE NULL
        END AS telefone2,
        COALESCE(s.opcao_mei, 'N') AS opcao_mei,
        e.uf,
        m.nome AS cidade,
        e.bairro,
        e.tipo_logradouro,
        e.logradouro,
        e.numero,
        e.complemento,
        e.cep,
        e.email
    FROM rfb_cnpj.estabelecimentos e
    INNER JOIN rfb_cnpj.empresas emp ON e.cnpj_basico = emp.cnpj_basico
    LEFT JOIN rfb_cnpj.cnaesModel c ON e.cnae_fiscal_principal = c.codigo
    LEFT JOIN rfb_cnpj.simples s ON e.cnpj_basico = s.cnpj_basico
    LEFT JOIN rfb_cnpj.municipios m ON e.municipio = m.siafi_id
    WHERE
        -- Filtros mais seletivos primeiro
        e.uf = ANY(p_ufs)
        AND e.cnae_fiscal_principal = ANY(p_cnaes)
        AND emp.natureza_juridica = ANY(p_naturezas_juridicas)
        AND e.situacao_cadastral = ANY(p_situacoes_cadastrais)
        AND (p_cnpj_maior IS NULL OR e.cnpj_completo > p_cnpj_maior)
        -- Filtro MEI otimizado
        AND (
            cardinality(p_opcao_meis) = 0 OR  -- Se array vazio, não filtrar
            (s.opcao_mei IS NULL AND 'N' = ANY(p_opcao_meis)) OR
            (s.opcao_mei IS NOT NULL AND s.opcao_mei = ANY(p_opcao_meis))
        )
    ORDER BY e.cnpj_completo
    LIMIT p_limit;
END;
$function$;

-------------------------------------------

-- Índices otimizados para a função exportar_dados_cnpj_cursor

-- 1. Índice principal para estabelecimentos (mais importante)
CREATE INDEX IF NOT EXISTS idx_estabelecimentos_filtros_otimizado
ON rfb_cnpj.estabelecimentos (
    uf,
    cnae_fiscal_principal,
    situacao_cadastral,
    cnpj_completo
);

-- 2. Índice para paginação eficiente
CREATE INDEX IF NOT EXISTS idx_estabelecimentos_cnpj_paginacao
ON rfb_cnpj.estabelecimentos (cnpj_completo)
WHERE situacao_cadastral IN ('02', '03', '04', '08'); -- Ajustar conforme situações mais comuns

-- 3. Índice para empresas (se não existir)
CREATE INDEX IF NOT EXISTS idx_empresas_natureza_juridica
ON rfb_cnpj.empresas (cnpj_basico, natureza_juridica);

-- 4. Índice para SIMPLES otimizado
CREATE INDEX IF NOT EXISTS idx_simples_opcao_mei
ON rfb_cnpj.simples (cnpj_basico, opcao_mei);

-- 5. Índice para municipios (se não existir)
CREATE INDEX IF NOT EXISTS idx_municipios_siafi
ON rfb_cnpj.municipios (siafi_id);

-- 6. Índice para CNAEs (se não existir)
CREATE INDEX IF NOT EXISTS idx_cnaes_codigo
ON rfb_cnpj.cnaesModel (codigo);

-- 7. Índice covering para casos específicos (opcional, para UFs com muitos dados)
CREATE INDEX IF NOT EXISTS idx_estabelecimentos_covering_sp
ON rfb_cnpj.estabelecimentos (
    cnae_fiscal_principal,
    situacao_cadastral,
    cnpj_completo
)
INCLUDE (
    cnpj_basico,
    uf,
    municipio,
    bairro,
    tipo_logradouro,
    logradouro,
    numero,
    complemento,
    cep,
    email,
    ddd_telefone_1,
    telefone_1,
    ddd_telefone_2,
    telefone_2
)
WHERE uf = 'SP'; -- Repetir para outras UFs com muitos dados

-- 8. Estatísticas para o otimizador
-- Execute periodicamente:
-- ANALYZE rfb_cnpj.estabelecimentos;
-- ANALYZE rfb_cnpj.empresas;
-- ANALYZE rfb_cnpj.simples;